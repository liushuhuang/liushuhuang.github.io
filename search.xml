<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Amq学习</title>
      <link href="/2022/09/20/Amq%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/20/Amq%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MQ学习前言"><a href="#MQ学习前言" class="headerlink" title="MQ学习前言"></a>MQ学习前言</h1><p><a href="https://www.bilibili.com/video/BV164411G7aB?p=4&spm_id_from=pageDriver&vd_source=a80e07578090034c5f50287c46855074">b站学习视频链接</a></p><h2 id="1-1-消息"><a href="#1-1-消息" class="headerlink" title="1.1 消息"></a>1.1 消息</h2><p>​消息以一种双方约定好的格式作为一种信息的载体媒介，在网络上进行传输，以实现信息同步和资源的交换</p><h2 id="1-2-中间件"><a href="#1-2-中间件" class="headerlink" title="1.2 中间件"></a>1.2 中间件</h2><blockquote><p>中间件（英语：Middleware）顾名思义是系统软件和用户应用软件之间连接的软件，以便于软件各部件之间的沟通，特别是应用软件对于系统软件的集中的逻辑，是一种独立的系统软件或服务程序，<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>应用软件借助这种软件在不同的技术之间共享资源。中间件在客户服务器的操作系统、网络和数据库之上，管理计算资源和网络通信。总的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户灵活、高效地开发和集成复杂的应用软件。</p><p>也就是说，关于中间件，我们可以理解为：是一类能够为一种或多种应用程序合作互通、资源共享，同时还能够为该应用程序提供相关的服务的软件。中间件是一类软件统称，而非一种软件;中间件不仅仅实现互连，还要实现应用之间的互操作。</p></blockquote><h2 id="1-3-什么是MQ"><a href="#1-3-什么是MQ" class="headerlink" title="1.3 什么是MQ"></a>1.3 什么是MQ</h2><blockquote><p>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p></blockquote><h2 id="1-3-为什么要用MQ"><a href="#1-3-为什么要用MQ" class="headerlink" title="1.3 为什么要用MQ"></a>1.3 为什么要用MQ</h2><p>此部分转载于<a href="https://blog.csdn.net/lisu061714112/article/details/116465216">CSDN博文</a></p><h3 id="1-传统模式有哪些痛点？"><a href="#1-传统模式有哪些痛点？" class="headerlink" title="1. 传统模式有哪些痛点？"></a>1. 传统模式有哪些痛点？</h3><h4 id="1-1-痛点1"><a href="#1-1-痛点1" class="headerlink" title="1.1 痛点1"></a>1.1 痛点1</h4><blockquote><p>有些复杂的业务系统，一次用户请求可能会同步调用N个系统的接口，需要等待所有的接口都返回了，才能真正的获取执行结果。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2021050622512343.png" alt="2 (2)"></p><blockquote><p>这种同步接口调用的方式总耗时比较长，非常影响用户的体验，特别是在网络不稳定的情况下，极容易出现接口超时问题。</p></blockquote><h4 id="1-2-痛点2"><a href="#1-2-痛点2" class="headerlink" title="1.2 痛点2"></a>1.2 痛点2</h4><blockquote><p>很多复杂的业务系统，一般都会拆分成多个子系统。我们在这里以用户下单为例，请求会先通过订单系统，然后分别调用：支付系统、库存系统、积分系统 和 物流系统。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225143161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70" alt="2"></p><blockquote><p>系统之间耦合性太高，如果调用的任何一个子系统出现异常，整个请求都会异常，对系统的稳定性非常不利。</p></blockquote><h4 id="1-3-痛点3"><a href="#1-3-痛点3" class="headerlink" title="1.3 痛点3"></a>1.3 痛点3</h4><blockquote><p>有时候为了吸引用户，我们会搞一些活动，比如秒杀等。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225201511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>如果用户少还好，不会影响系统的稳定性。但如果用户突增，一时间所有的请求都到数据库，可能会导致数据库无法承受这么大的压力，响应变慢或者直接挂掉。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2021050622520953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>对于这种突然出现的请求峰值，无法保证系统的稳定性。</p></blockquote><h3 id="2-为什么要用mq？"><a href="#2-为什么要用mq？" class="headerlink" title="2 为什么要用mq？"></a>2 为什么要用mq？</h3><blockquote><p>对于上面传统模式的三类问题，我们使用mq就能轻松解决。</p></blockquote><h4 id="2-1-异步"><a href="#2-1-异步" class="headerlink" title="2.1 异步"></a>2.1 异步</h4><blockquote><p>对于痛点1：同步接口调用导致响应时间长的问题，使用mq之后，将同步调用改成异步，能够显著减少系统响应时间。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225226300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70" alt="2.1"></p><blockquote><p>系统A作为消息的生产者，在完成本职工作后，就能直接返回结果了。而无需等待消息消费者的返回，它们最终会独立完成所有的业务功能。</p><p>这样能避免总耗时比较长，从而影响用户的体验的问题。</p></blockquote><h4 id="2-2-解耦"><a href="#2-2-解耦" class="headerlink" title="2.2 解耦"></a>2.2 解耦</h4><blockquote><p>对于痛点2：子系统间耦合性太大的问题，使用mq之后，我们只需要依赖于mq，避免了各个子系统间的强依赖问题。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225244715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>订单系统作为消息生产者，保证它自己没有异常即可，不会受到支付系统等业务子系统的异常影响，并且各个消费者业务子系统之间，也互不影响。</p><p>这样就把之前复杂的业务子系统的依赖关系，转换为只依赖于mq的简单依赖，从而显著的降低了系统间的耦合度。</p></blockquote><h4 id="2-3-消峰"><a href="#2-3-消峰" class="headerlink" title="2.3 消峰"></a>2.3 消峰</h4><blockquote><p>对于痛点3：由于突然出现的请求峰值，导致系统不稳定的问题。使用mq后，能够起到消峰的作用。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225301831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>订单系统接收到用户请求之后，将请求直接发送到mq，然后订单消费者从mq中消费消息，做写库操作。如果出现请求峰值的情况，由于消费者的消费能力有限，会按照自己的节奏来消费消息，多的请求不处理，保留在mq的队列中，不会对系统的稳定性造成影响。</p></blockquote><h2 id="1-4引入mq会多哪些问题？"><a href="#1-4引入mq会多哪些问题？" class="headerlink" title="1.4引入mq会多哪些问题？"></a>1.4引入mq会多哪些问题？</h2><p>此部分转载于<a href="https://blog.csdn.net/lisu061714112/article/details/116465216">CSDN博文</a></p><blockquote><p>引入mq后让我们子系统间耦合性降低了，异步处理机制减少了系统的响应时间，同时能够有效的应对请求峰值问题，提升系统的稳定性。</p><p>但是，引入mq同时也会带来一些问题。</p></blockquote><h3 id="1-重复消息问题"><a href="#1-重复消息问题" class="headerlink" title="1. 重复消息问题"></a>1. 重复消息问题</h3><blockquote><p>重复消费问题可以说是mq中普遍存在的问题，不管你用哪种mq都无法避免。</p><p>有哪些场景会出现重复的消息呢？</p><p>1.消息生产者产生了重复的消息<br>2.kafka和rocketmq的offset被回调了<br>3.消息消费者确认失败<br>4.消息消费者确认时超时了<br>5.业务系统主动发起重试</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225342468.png"></p><blockquote><p>如果重复消息不做正确的处理，会对业务造成很大的影响，产生重复的数据，或者导致数据异常，比如会员系统多开通了一个月的会员。</p></blockquote><h3 id="2-数据一致性问题"><a href="#2-数据一致性问题" class="headerlink" title="2. 数据一致性问题"></a>2. 数据一致性问题</h3><blockquote><p>很多时候，如果mq的消费者业务处理异常的话，就会出现数据一致性问题。比如：一个完整的业务流程是，下单成功之后，送100个积分。下单写库了，但是消息消费者在送积分的时候失败了，就会造成数据不一致的情况，即该业务流程的部分数据写库了，另外一部分没有写库。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225356808.png"></p><blockquote><p>如果下单和送积分在同一个事务中，要么同时成功，要么同时失败，是不会出现数据一致性问题的。</p><p>但由于跨系统调用，为了性能考虑，一般不会使用强一致性的方案，而改成达成最终一致性即可。</p></blockquote><h3 id="3-消息丢失问题"><a href="#3-消息丢失问题" class="headerlink" title="3. 消息丢失问题"></a>3. 消息丢失问题</h3><blockquote><p>同样消息丢失问题，也是mq中普遍存在的问题，不管你用哪种mq都无法避免。</p><p>有哪些场景会出现消息丢失问题呢？</p><p>1.消息生产者发生消息时，由于网络原因，发生到mq失败了。<br>2.mq服务器持久化时，磁盘出现异常<br>3.kafka和rocketmq的offset被回调时，略过了很多消息。<br>4.消息消费者刚读取消息，已经ack确认了，但业务还没处理完，服务就被重启了。<br>导致消息丢失问题的原因挺多的，生产者、mq服务器、消费者 都有可能产生问题，我在这里就不一一列举了。最终的结果会导致消费者无法正确的处理消息，而导致数据不一致的情况。</p></blockquote><h3 id="4-消息顺序问题"><a href="#4-消息顺序问题" class="headerlink" title="4. 消息顺序问题"></a>4. 消息顺序问题</h3><blockquote><p>有些业务数据是有状态的，比如订单有：下单、支付、完成、退货等状态，如果订单数据作为消息体，就会涉及顺序问题了。如果消费者收到同一个订单的两条消息，第一条消息的状态是下单，第二条消息的状态是支付，这是没问题的。但如果第一条消息的状态是支付，第二条消息的状态是下单就会有问题了，没有下单就先支付了？</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225535443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>消息顺序问题是一个非常棘手的问题，比如：</p><ul><li>kafka同一个partition中能保证顺序，但是不同的partition无法保证顺序。</li><li>rabbitmq的同一个queue能够保证顺序，但是如果多个消费者同一个queue也会有顺序问题。如果消费者使用多线程消费消息，也无法保证顺序。</li></ul><p>如果消费消息时同一个订单的多条消息中，中间的一条消息出现异常情况，顺序将会被打乱。</p><p>还有如果生产者发送到mq中的路由规则，跟消费者不一样，也无法保证顺序。</p></blockquote><h3 id="5-消息堆积"><a href="#5-消息堆积" class="headerlink" title="5. 消息堆积"></a>5. 消息堆积</h3><blockquote><p>如果消息消费者读取消息的速度，能够跟上消息生产者的节奏，那么整套mq机制就能发挥最大作用。但是很多时候，由于某些批处理，或者其他原因，导致消息消费的速度小于生产的速度。这样会直接导致消息堆积问题，从而影响业务功能。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225558431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>这里以下单开通会员为例，如果消息出现堆积，会导致用户下单之后，很久之后才能变成会员，这种情况肯定会引起大量用户投诉。</p></blockquote><h3 id="6-系统复杂度提升"><a href="#6-系统复杂度提升" class="headerlink" title="6. 系统复杂度提升"></a>6. 系统复杂度提升</h3><blockquote><p>这里说的系统复杂度和系统耦合性是不一样的，比如以前只有：系统A、系统B和系统C 这三个系统，现在引入mq之后，你除了需要关注前面三个系统之外，还需要关注mq服务，需要关注的点越多，系统的复杂度越高。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225613813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>mq的机制需要：生产者、mq服务器、消费者。</p><p>有一定的学习成本，需要额外部署mq服务器，而且有些mq比如：rocketmq，功能非常强大，用法有点复杂，如果使用不好，会出现很多问题。有些问题，不像接口调用那么容易排查，从而导致系统的复杂度提升了。</p></blockquote><h2 id="1-5-如何解决这些问题？"><a href="#1-5-如何解决这些问题？" class="headerlink" title="1.5 如何解决这些问题？"></a>1.5 如何解决这些问题？</h2><p>此部分转载于<a href="https://blog.csdn.net/lisu061714112/article/details/116465216">CSDN博文</a></p><blockquote><p>mq是一种趋势，总体来说对我们的系统是利大于弊的难道因为它会出现一些问题，我们就不用它了？</p><p>那么我们要如何解决这些问题呢？</p></blockquote><h3 id="1-重复消息问题-1"><a href="#1-重复消息问题-1" class="headerlink" title="1. 重复消息问题"></a>1. 重复消息问题</h3><blockquote><p>不管是由于生产者产生的重复消息，还是由于消费者导致的重复消息，我们都可以在消费者中这个问题。</p><p>这就要求消费者在做业务处理时，要做幂等设计，如果有不知道如何设计的朋友，可以参考《高并发下如何保证接口的幂等性？》，里面介绍得非常详情。</p><p>在这里我推荐增加一张消费消息表，来解决mq的这类问题。消费消息表中，使用messageId做唯一索引，在处理业务逻辑之前，先根据messageId查询一下该消息有没有处理过，如果已经处理过了则直接返回成功，如果没有处理过，则继续做业务处理。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225639741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><h3 id="2-数据一致性问题-1"><a href="#2-数据一致性问题-1" class="headerlink" title="2. 数据一致性问题"></a>2. 数据一致性问题</h3><blockquote><p>我们都知道数据一致性分为：</p><ul><li>强一致性</li><li>弱一致性</li><li>最终一致性<br> 而mq为了性能考虑使用的是最终一致性，那么必定会出现数据不一致的问题。这类问题大概率是因为消费者读取消息后，业务逻辑处理失败导致的，这时候可以增加重试机制。</li></ul><p>重试分为：同步重试 和 异步重试。</p><p>有些消息量比较小的业务场景，可以采用同步重试，在消费消息时如果处理失败，立刻重试3-5次，如何还是失败，则写入到记录表中。但如果消息量比较大，则不建议使用这种方式，因为如果出现网络异常，可能会导致大量的消息不断重试，影响消息读取速度，造成消息堆积。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225701468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>而消息量比较大的业务场景，建议采用异步重试，在消费者处理失败之后，立刻写入重试表，有个job专门定时重试。</p><p>还有一种做法是，如果消费失败，自己给同一个topic发一条消息，在后面的某个时间点，自己又会消费到那条消息，起到了重试的效果。如果对消息顺序要求不高的场景，可以使用这种方式。</p></blockquote><h3 id="3-消息丢失问题-1"><a href="#3-消息丢失问题-1" class="headerlink" title="3. 消息丢失问题"></a>3. 消息丢失问题</h3><blockquote><p>不管你是否承认有时候消息真的会丢，即使这种概率非常小，也会对业务有影响。生产者、mq服务器、消费者都有可能会导致消息丢失的问题。</p><p>为了解决这个问题，我们可以增加一张消息发送表，当生产者发完消息之后，会往该表中写入一条数据，状态status标记为待确认。如果消费者读取消息之后，调用生产者的api更新该消息的status为已确认。有个job，每隔一段时间检查一次消息发送表，如果5分钟（这个时间可以根据实际情况来定）后还有状态是待确认的消息，则认为该消息已经丢失了，重新发条消息。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225721333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>这样不管是由于生产者、mq服务器、还是消费者导致的消息丢失问题，job都会重新发消息。</p></blockquote><h3 id="4-消息顺序问题-1"><a href="#4-消息顺序问题-1" class="headerlink" title="4. 消息顺序问题"></a>4. 消息顺序问题</h3><blockquote><p>消息顺序问题是我们非常常见的问题，我们以kafka消费订单消息为例。订单有：下单、支付、完成、退货等状态，这些状态是有先后顺序的，如果顺序错了会导致业务异常。</p><p>解决这类问题之前，我们先确认一下，消费者是否真的需要知道中间状态，只知道最终状态行不行？</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225733571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>其实很多时候，我真的需要知道的是最终状态，这时可以把流程优化一下：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225743780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>这种方式可以解决大部分的消息顺序问题。</p><p>但如果真的有需要保证消息顺序的需求。订单号路由到不同的partition，同一个订单号的消息，每次到发到同一个partition。</p></blockquote><h3 id="5-消息堆积-1"><a href="#5-消息堆积-1" class="headerlink" title="5. 消息堆积"></a>5. 消息堆积</h3><blockquote><p>如果消费者消费消息的速度小于生产者生产消息的速度，将会出现消息堆积问题。其实这类问题产生的原因很多，如果你想进一步了解，可以看看我的另一篇文章《我用kafka两年踩过的一些非比寻常的坑》。</p><p>那么消息堆积问题该如何解决呢？</p><p>这个要看消息是否需要保证顺序。</p><p>如果不需要保证顺序，可以读取消息之后用多线程处理业务逻辑。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225808736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p><blockquote><p>这样就能增加业务逻辑处理速度，解决消息堆积问题。但是线程池的核心线程数和最大线程数需要合理配置，不然可能会浪费系统资源。</p><p>如果需要保证顺序，可以读取消息之后，将消息按照一定的规则分发到多个队列中，然后在队列中用单线程处理。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210506225817897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc3UwNjE3MTQxMTI=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Amq  mq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置详情</title>
      <link href="/2022/09/19/Nginx%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/09/19/Nginx%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 概述：一共三大部分配置。</span></span><br><span class="line"><span class="comment"># 其中#注释掉的可以在需要的时候开启并修改，没有注释掉的（除了下面location示例）不要删掉，基本都是必须的配置项。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################第一部分 全局配置############################</span></span><br><span class="line"><span class="comment">#user  nobody;                        指定启动进程的用户，默认不用指定即可。</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;           配置日志输出，虽然叫error_log但是可以定义输出的级别，默认不写是ERROR级别</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;   </span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;           记录pid的文件，默认就是放到这个位置，可以修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只启动一个进程，nginx是多进程单线程模型，但是使用了epoll sendfile 非阻塞io</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################第二部分 event配置############################</span></span><br><span class="line"><span class="comment">#主要是网络连接相关的配置</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="comment"># 每个worker能连接1024个链接</span></span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">  <span class="comment">#use epoll; 事件驱动模型select|poll|kqueue|epoll|resig</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################第三部分 http配置############################</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>       mime.types;  <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">  <span class="attribute">default_type</span>  text/html;   <span class="comment">#默认的返回类型，可以在server.location里面改</span></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;        <span class="comment">#开启sendfile系统调用</span></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;     <span class="comment">#连接超时时间65s</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 下面展示多个demo，demo之间互相没有依赖关系，可以单独配置来进行测试。</span></span><br><span class="line">    <span class="comment"># 其中demo1到demo6 是nginx相关的。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">############### demo1 展示location路径的不同写法优先级 ###############</span></span><br><span class="line">    <span class="comment"># =最高优先级 表示路径完全等于，可以匹配/demo1/a/b的请求</span></span><br><span class="line">    <span class="section">location</span> =/demo1/a/b &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;=/demo1/a/b&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment"># ^~第二高  表示startsWith，可以匹配/demo1/a/b/c和/demo1/abc请求</span></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~/demo1/a</span> &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;^~/demo1/a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ~等四个符号第三高  表示正则，如果要用&#123;&#125;是特殊符号，需要整个加引号，建议直接加双引号，防止出错，可以匹配/demo1/bcd</span></span><br><span class="line">    <span class="comment"># 其他三个：~*不区分大小写正则，!~正则不匹配的，!~*不分大小写的正则不匹配</span></span><br><span class="line">    <span class="section">location</span> <span class="string">&quot;~/demo1/\w&#123;3&#125;$&quot;</span> &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;regex&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 最低 没有前置符号 /demo1 /demo111 /demo1/b/c 不符合上面三种，就会匹配到这</span></span><br><span class="line">    <span class="section">location</span> /demo1&#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;/demo1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############### demo2 展示serve静态文件夹 ###############</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">       <span class="attribute">root</span>   html;                 <span class="comment"># root就是根目录是当前html目录</span></span><br><span class="line">       <span class="attribute">index</span>  index.html index.htm; <span class="comment"># index表示默认不写的时候转到的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############## demo3 指定错误文件 ###############</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">       <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo4 rewrite重写url rewrite也可以是server级别 ####################</span></span><br><span class="line">    <span class="section">location</span> /demo4 &#123;</span><br><span class="line">      <span class="comment"># 一般放到最后一行</span></span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /<span class="variable">$1</span>/api <span class="literal">permanent</span>; <span class="comment"># permanent301, redirect302, break不在匹配后面rewrite规则，last继续向下匹配。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /demo4/api &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;/demo4/api&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo5 demo6 proxy_pass反向代理 ####################</span></span><br><span class="line">    <span class="comment"># /demo5 =&gt; baidu.com/demo5</span></span><br><span class="line">    <span class="comment"># /demo5/a/b =&gt; baidu.com/demo5/a/b</span></span><br><span class="line">    <span class="section">location</span> /demo5 &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span>  https://www.baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># /demo6 =&gt; baidu.com</span></span><br><span class="line">    <span class="comment"># /demo6/a/b =&gt; baidu.com/a/b</span></span><br><span class="line">    <span class="section">location</span> /demo6 &#123;</span><br><span class="line">      <span class="comment"># proxy_set_header Host $http_host; 如果有请求头改动的需求可以搜索proxy_set_header去了解</span></span><br><span class="line">      <span class="attribute">proxy_pass</span>  https://www.baidu.com/;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 下面demo7到demo11是openresty lua的一些配置demo</span></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">############# demo7 init_by_lua_block 用来加载经常用到的库 或者 用来对多进程shared变量赋值 ####################</span></span><br><span class="line">    <span class="section">init_by_lua_block</span> &#123;</span><br><span class="line">      <span class="attribute">cjson</span> = require(<span class="string">&quot;cjson&quot;</span>)       --后续的lua流程中可以直接使用cjson</span><br><span class="line">      local myname = ngx.shared.<span class="literal">info</span> --可以认为是静态变量，通过<span class="literal">info</span>:get获取变量值</span><br><span class="line">      <span class="literal">info</span>:set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;frank&quot;</span>)</span><br><span class="line">      <span class="literal">info</span>:set(<span class="string">&quot;age&quot;</span>, <span class="number">77</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo8 demo9 rewrite_by_lua_block 配合ngx.redirect用来替换rewrite指令 ####################</span></span><br><span class="line">    <span class="comment"># 注意rewrite_by_lua和因为作用阶段是nginx原生rewrite之后，所以容易和原生一起用的时候出错，最好的方式就是只用lua的不要用nginx的了。</span></span><br><span class="line">    location /demo8 &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$a</span> <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$b</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line">        ngx.var.<span class="attribute">b</span> = tonumber(ngx.var.a) + <span class="number">1</span></span><br><span class="line">        if tonumber(ngx.var.b) == <span class="number">2</span> then</span><br><span class="line">          return ngx.<span class="literal">redirect</span>(<span class="string">&quot;/demo9&quot;</span>) --默认是<span class="number">302</span>，如果要<span class="number">301</span>或<span class="number">307</span>可以再加一个第二参数即可</span><br><span class="line">        end</span><br><span class="line">      &#125;</span><br><span class="line">      echo <span class="string">&quot;demo8&quot;</span>; <span class="comment"># 注意echo是content阶段的，rewrite阶段重定向了请求，就走不到这里了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /demo9 &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">&quot;demo9&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">############# demo10 access_by_lua_block 用来做一些加载内容前的准备工作例如访问redis看看用户身份是不是合法 ip是不是合法等 ####################</span></span><br><span class="line">    <span class="section">location</span> /demo10 &#123;</span><br><span class="line">      <span class="section">access_by_lua_block</span> &#123;</span><br><span class="line">        <span class="attribute">local</span> res = ngx.location.capture(<span class="string">&quot;/auth&quot;</span>) -- ngx.location.capture是作为客户端发起http请求拿到结果</span><br><span class="line">        if res.status == ngx.HTTP_OK then</span><br><span class="line">          return  -- 正常return就能走到content阶段</span><br><span class="line">        end</span><br><span class="line">        if res.status == ngx.HTTP_FORBIDDEN then</span><br><span class="line">          ngx.exit(res.status) -- exit + 状态码 就直接返回状态码了</span><br><span class="line">        end</span><br><span class="line">        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</span><br><span class="line">      &#125;</span><br><span class="line">      echo <span class="string">&quot;demo10&quot;</span>; <span class="comment"># 如果合法的话就返回demo10字样</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /auth &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span>; <span class="comment"># 换成403 or 500试试</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo10 content_by_lua_block 用来作为content阶段的脚本，一般测试用的多 ####################</span></span><br><span class="line">    <span class="comment">#不要和 echo proxy_pass等content阶段指令一起用</span></span><br><span class="line">    <span class="section">location</span> /demo10 &#123;</span><br><span class="line">      content_by_lua_block&#123;</span><br><span class="line">        ngx.say(&quot;/demo10&quot;);</span><br><span class="line">        ngx.say(&quot;/demo11&quot;); -- 和外部用俩echo效果类似。ngx.<span class="attribute">say</span> ngx.print区别是前者会多个回车在最后</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># echo &quot;echo10&quot;;   如果外面用了echo，则只有echo的效果</span></span><br><span class="line">      <span class="comment"># proxy_pass http://www.baidu.com; 如果外面用了proxy_pass也是只有proxy_pass效果了，因为都是content阶段，content只能一个生效。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">############# demo11 rewrite_by_lua与proxy_pass配合 根据参数进行转发 ####################</span></span><br><span class="line">    location /demo11 &#123;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$proxy</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">rewrite_by_lua</span> <span class="string">&#x27;            # 千万别用content，因为content和proxy_pass阶段犯冲</span></span><br><span class="line"><span class="string">local h = ngx.var.host    # 这里从host中提出第一个.之前的部分看是不是a来决定转发到哪</span></span><br><span class="line"><span class="string">local dot = h:find(&quot;%.&quot;)</span></span><br><span class="line"><span class="string">local prefix = h:sub(1,dot-1)</span></span><br><span class="line"><span class="string">if prefix == &quot;a&quot; then</span></span><br><span class="line"><span class="string">ngx.var.proxy=&quot;127.0.0.1:3000&quot;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">ngx.var.proxy=&quot;127.0.0.1:5500&quot;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">      &#x27;</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://<span class="variable">$proxy</span><span class="variable">$uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx相关知识</title>
      <link href="/2022/09/19/Nginx/"/>
      <url>/2022/09/19/Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><blockquote><ul><li><p>Nginx 是高性能的 HTTP 和反向代理的web服务器，处理高并发能力是十分强大的，能经受高负 载的考验,有报告表明能支持高达 50,000 个并发连接数。</p></li><li><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p></li></ul></blockquote><h2 id="Nginx能干什么"><a href="#Nginx能干什么" class="headerlink" title="Nginx能干什么"></a>Nginx能干什么</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><blockquote><p>为客户端代理，局域网连接Internet时的代理</p><ul><li>正向代理，指的是通过<code>代理服务器</code> 代理<code>浏览器/客户端</code>去重定向请求访问到<code>目标服务器</code> 的一种代理服务。</li><li>正向代理服务的特点是<code>代理服务器</code> 代理的对象是<code>浏览器/客户端</code>，也就是对于<code>目标服务器</code> 来说<code>浏览器/客户端</code>是隐藏的。</li></ul></blockquote><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote><p>服务器的代理，对请求进行代理转发</p><ul><li>反向代理，指的是<code>浏览器/客户端</code>并不知道自己要访问具体哪台<code>目标服务器</code>，只知道去访问<code>代理服务器</code> ，<code>代理服务器</code>再通过<code>反向代理 +负载均衡</code>实现请求分发到<code>应用服务器</code>的一种代理服务。</li><li>反向代理服务的特点是<code>代理服务器</code> 代理的对象是<code>应用服务器</code>，也就是对于<code>浏览器/客户端</code> 来说<code>应用服务器</code>是隐藏的。</li></ul></blockquote><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>对请求进行分配，减少每一台服务器的压力</p><ul><li>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</li><li>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。</li></ul></blockquote><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><blockquote><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p>Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式</p></blockquote><h3 id="负载均衡常用算法"><a href="#负载均衡常用算法" class="headerlink" title="负载均衡常用算法"></a>负载均衡常用算法</h3><ol><li><p><strong>基于<code>轮询</code>的算法</strong></p><blockquote><p>原理是每一个请求按时间顺序逐一被分发到不同的应用服务器，如果接收请求的应用服务器挂了，并且请求超过最大失败次数<code>max_fails</code>（<strong>1次</strong>），则在失效时间<code>fail_timeout</code>（<strong>10秒</strong>）内不会再转发请求到该节点</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> defaultReverseProxyServer&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:8080</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.2:8080</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>基于<code>权重</code>的算法</strong></p><blockquote><p>原理是每一个请求按权重被分发到不同的应用服务器，同样，如果接收请求的应用服务器挂了，并且请求超过最大失败次数<code>max_fails</code>（<strong>默认1次或可设置N次</strong>），则在失效时间<code>fail_timeout</code>（<strong>默认10秒，可设置N秒</strong>）内，不会再转发请求到该节点</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> weightReverseProxyServer&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.0.1:8080</span> weight=<span class="number">10</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.2:8080</span> weight=<span class="number">5</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>基于<code>ip_hash</code>的算法</strong></p><blockquote><p>原理是每一个请求按用户访问IP的哈希结果分配，如果请求来自同一个用户IP则固定这台IP访问一台应用服务器，该算法可以有效解决动态网页中存在的session共享问题。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> ipHashReverseProxyServer&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.2:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><blockquote><p>.&#x2F;nginx  启动<br>.&#x2F;nginx -s stop  停止<br>.&#x2F;nginx -s quit  安全退出<br>.&#x2F;nginx -s reload  重新加载配置文件<br>ps aux|grep nginx  查看nginx进程</p></blockquote><p>Nginx连接相关代码</p><blockquote><p><strong>开启</strong></p><p>​service firewalld start</p><p><strong>重启</strong></p><p>​service firewalld restart</p><p><strong>关闭</strong></p><p>​service firewalld stop</p><p><strong>查看防火墙规则</strong></p><p>​firewall-cmd –list-all</p><p><strong>查询端口是否开放</strong></p><p>​firewall-cmd –query-port&#x3D;8080&#x2F;tcp</p><p><strong>开放80端口</strong></p><p>​firewall-cmd –permanent –add-port&#x3D;80&#x2F;tcp</p><p><strong>移除端口</strong></p><p>​firewall-cmd –permanent –remove-port&#x3D;8080&#x2F;tcp<br><strong>#重启防火墙(修改配置后要重启防火墙)</strong><br>​firewall-cmd –reload</p><p><strong>参数解释</strong></p><p>​1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>​2、–permanent：表示设置为持久；<br>​3、–add-port：标识添加的端口；</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>文件结构</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Global: <span class="attribute">nginx</span> 运行相关</span><br><span class="line">Events: 与用户的网络连接相关</span><br><span class="line">http</span><br><span class="line">    http Global: 代理，缓存，日志，以及第三方模块的配置</span><br><span class="line">    server</span><br><span class="line">        server Global: 虚拟主机相关</span><br><span class="line">        location: 地址定向，数据缓存，应答控制，以及第三方模块的配置</span><br></pre></td></tr></table></figure><blockquote><p>Nginx的HTTP配置主要包括三个区块，结构如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="section">http</span> &#123; //这个是协议级别</span><br><span class="line">　<span class="attribute">include</span> mime.types;</span><br><span class="line">　<span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">　<span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">　<span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">　　　<span class="section">server</span> &#123; //这个是服务器级别</span><br><span class="line">　　　　　<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">　　　　　<span class="attribute">server_name</span> localhost;</span><br><span class="line">　　　　　　　<span class="section">location</span> / &#123; //这个是请求级别</span><br><span class="line">　　　　　　　　　<span class="attribute">root</span> html;</span><br><span class="line">　　　　　　　　　<span class="attribute">index</span> index.html index.htm;</span><br><span class="line">　　　　　　　&#125;</span><br><span class="line">　　　　　&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>*<em>查找顺序和优先级<br>1：带有“&#x3D;“的精确匹配优先<br>2：没有修饰符的精确匹配<br>3：带有“^<del>”修饰符的，开头匹配<br>4：带有“</del>” 或“~ <em>” 修饰符的，（正则表达式与URI匹配）<br>5：没有修饰符的，（指定字符串与URI开头匹配）                                                                                                       6：都没有匹配则匹配到  &#x2F;</em></em>                                                                                                                      </p><p><strong>注：^代表以什么开头，类似~ ^&#x2F;a 代表以正则表达式匹配，以&#x2F;a开头，和4一样的作用，但是优先级不一样</strong></p><p>优先级较高的先匹配</p><p>同等优先级，匹配程度较高的先匹配</p><p>优先级和匹配程度都相同，写在前面的先匹配</p></blockquote><blockquote><p>配置反向代理用proxy_pass</p><p>例：</p><p>upstream aaa{    #负载均衡</p><p>​server 1.1.1.1:80 max_fails &#x3D; 3  fail_timeout &#x3D; 5s</p><p>}</p><p>location ~^ &#x2F;a {</p><p>​proxy_pass: <a href="http://aaa/">http://aaa</a>;</p><p>}</p></blockquote><h2 id="反向代理路径拼接"><a href="#反向代理路径拼接" class="headerlink" title="反向代理路径拼接"></a>反向代理路径拼接</h2><blockquote><ol><li>location &#x2F; {</li></ol><p>  ​proxy_pass: <a href="http://192.168.0.2/">http://192.168.0.2:80</a></p><p>  }</p><p>  代表转到<a href="http://192.168.0.2/">http://192.168.0.2:80/</a></p><ol start="2"><li>location &#x2F;a{</li></ol><p>  ​proxy_pass: <a href="http://192.168.0.2/">http://192.168.0.2:80</a></p><p>  }</p><p>  代表转到<a href="http://192.168.0.2/a">http://192.168.0.2:80/a</a></p><ol start="3"><li><strong>location &#x2F;a {</strong></li></ol><p>  ​<strong>proxy_pass: <a href="http://192.168.0.2/">http://192.168.0.2:80/</a></strong></p><p>  <strong>}</strong></p><p>  <strong>代表转到<a href="http://192.168.0.2/">http://192.168.0.2:80/</a></strong></p><p>  注意第三种</p></blockquote><blockquote><p> &#x2F;demo4和&#x2F;demo4&#x2F;区别是前者能匹配&#x2F;demo4444这种路径的，后者不能，他们是决定能不能进来下面的逻辑的。一般用后者防止出一些奇葩路径。proxy_pass中有任何&#x2F;的话，&#x2F;不一定在最后，不过http协议里那俩除外，有和无是两个计算公式。<br> 无：最终url &#x3D;  proxy_pass的值 + uri。<br>  有：最终url &#x3D; proxy_pass的值 + （uri-location的值）<br> 举个例子 location &#x2F;a proxy_pass <a href="http://xx.com/11/22/33">http://xx.com/11/22/33</a>;<br>  访问&#x2F;ab转到<a href="http://xx.com/11/22/33b">http://xx.com/11/22/33b</a><br> 访问&#x2F;a&#x2F;b转到<a href="http://xx.com/11/22/33/b">http://xx.com/11/22/33/b</a></p><p> 换个例子，location &#x2F;a proxy_pass <a href="http://xx.com/11/22/33/">http://xx.com/11/22/33/</a>;<br> 访问&#x2F;a&#x2F;b转到<a href="http://xx.com/11/22/33//b%EF%BC%88//b%E4%B8%80%E8%88%AC%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E4%B8%BA/b%EF%BC%89">http://xx.com/11/22/33//b（//b一般会自动转为/b）</a></p><p>  再举个例子 location &#x2F;a&#x2F; proxy_pass <a href="http://xx.com/11/22/33/">http://xx.com/11/22/33/</a>;<br> 访问&#x2F;a&#x2F;b转到 xx.com&#x2F;11&#x2F;22&#x2F;33b<br>  全都可以套公式计算出来的</p><p> root alias区别是，root找的文件路径&#x3D;root的值+uri，alias找的文件路径&#x3D;alias的值+(uri-location)<br> 例如都是location &#x2F;a，并且root和alias都指向html，index都是index.html。<br>  root： &#x2F;a       &#x3D;&gt; html&#x2F;a &#x3D;&gt; html&#x2F;a&#x2F;index.html<br> root:   &#x2F;a&#x2F;b.txt&#x3D;&gt;html&#x2F;a&#x2F;b.txt<br>  root:   &#x2F;ab.txt  &#x3D;&gt;html&#x2F;ab.txt<br> alias:   &#x2F;a       &#x3D;&gt;html&#x3D;&gt;html&#x2F;index.html<br>  alias:   &#x2F;a&#x2F;b.txt&#x3D;&gt;html&#x2F;b.txt<br> alias:   &#x2F;ab.txt&#x3D;&gt;htmlb.txt (404)<br>  为了避免最后这种情况，一般可以将location设置为&#x2F;结尾比如 location &#x2F;a&#x2F;，就不会匹配这个形式防止出错。<br> 或者将 alias设置为html&#x2F; 后面带个&#x2F;的。location还是&#x2F;a就能实现<br>  alias:   &#x2F;ab.txt&#x3D;&gt;html&#x2F;b.txt<br>  通俗点总结计算文件路径的方式就是：root的文件 &#x3D; root值+uri+【&#x2F;index.html】<br>  alias的文件 &#x3D; alias值 + （uri-location的值）+【&#x2F;index.html】</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2022/09/07/SQL%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/09/07/SQL%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><blockquote><p>create database 库名  （创建数据库）</p><p>drop database 库名     （删除数据库）</p></blockquote><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><h2 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a>创建和删除</h2><blockquote><p>create table 表名(字段1名  字段1属性  设置主键或外键,字段2名  字段2属性…………)</p><p>主键设置 primary key,</p><p>外键设置 foreign key(属性名)  references 外键所属的表名(属性名)</p></blockquote><blockquote><p>删除表</p><p>drop table 表名</p></blockquote><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><blockquote><p>增加外键</p><p>alter table 表名 add constraint 外键约束名 foreign key(列名) references 引用外键表(列名)</p><p>增加主键</p><p>alter table 表名 add primary key(字段1，字段2)  </p><p>删除外键</p><p>alter table 表名  drop constraint 外键名</p><p>增加一列</p><p>alter table 表名  add 列名  列属性</p><p>删除一列</p><p>alter table 表名 drop 列名</p><p>更改列名</p><p><strong>exec sp_rename</strong> ‘表名.列名’,’新列名’,’column’;</p><p>更改列的属性</p><p>alter table   表名  alter <strong>column</strong> 列名  新属性</p></blockquote><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><blockquote><p>insert into 表名(属性名1,属性名2 …….) values(属性值1,属性值2，属性值3……..);</p></blockquote><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><blockquote><p>删除记录</p><p>delete from 表名 where 条件</p></blockquote><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><blockquote><p>更新记录</p><p>updata 表名  set  列名 &#x3D;  值 where  条件</p></blockquote><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h2 id="1-查询出生年份"><a href="#1-查询出生年份" class="headerlink" title="1.查询出生年份"></a>1.查询出生年份</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,<span class="number">2022</span> <span class="operator">-</span> age <span class="keyword">from</span> stu</span><br></pre></td></tr></table></figure><h2 id="2-指定结果的显示列名"><a href="#2-指定结果的显示列名" class="headerlink" title="2.指定结果的显示列名"></a>2.指定结果的显示列名</h2><blockquote><p>select 列名1 as 显示名1,列名2 as 显示名2 ………..from   表名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">as</span> nn,<span class="number">2022</span> <span class="operator">-</span> age <span class="keyword">as</span> birth_year <span class="keyword">from</span> stu</span><br></pre></td></tr></table></figure><h2 id="3-查询去重"><a href="#3-查询去重" class="headerlink" title="3.查询去重"></a>3.查询去重</h2><blockquote><p>select <strong>distinct</strong>  列名  from  表名</p><p><code>一定要加列名，如果是</code> select <strong>distinct</strong>  *  from  表名  <code>这种写法没办法进行去重，因为没有指定去重目标</code></p></blockquote><h2 id="4-like"><a href="#4-like" class="headerlink" title="4.like"></a>4.like</h2><blockquote><p>如果不使用通配符，like就相当于&#x3D;</p></blockquote><h3 id="4-1通配符"><a href="#4-1通配符" class="headerlink" title="4.1通配符%"></a>4.1通配符%</h3><blockquote><p>%表示任意字符出现任意次数（包含0次）</p><p>搜寻姓刘的学生</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;刘%&#x27;</span>；</span><br></pre></td></tr></table></figure><blockquote><p>查询名字中有康的学生</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%刘%&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-2通配符"><a href="#4-2通配符" class="headerlink" title="4.2通配符_"></a>4.2通配符_</h3><blockquote><p>只适用于匹配单个字符,任意字符出现一次,不包含0；</p><p>查找姓名第二个字为述的学生</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu  where sname like &#x27;_述%&#x27;；</span><br></pre></td></tr></table></figure><h2 id="5-查询条件不等于的表示"><a href="#5-查询条件不等于的表示" class="headerlink" title="5.查询条件不等于的表示"></a>5.查询条件不等于的表示</h2><blockquote><p>查询时的不等于的表示是a&lt;&gt;b;表示a不等于b</p><p>还可以直接使用！&#x3D;来表示</p></blockquote><h2 id="6-范围查询"><a href="#6-范围查询" class="headerlink" title="6.范围查询"></a>6.范围查询</h2><blockquote><p>1.使用不等式的组合来查询；</p><p>2.使用between…. and ….;</p><p>例：查询年龄18 到 20岁的名字</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> stu  <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span><span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> stu  <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="7-查询在某个集合里的记录（例：查询课程号为1或2的课程）"><a href="#7-查询在某个集合里的记录（例：查询课程号为1或2的课程）" class="headerlink" title="7.查询在某个集合里的记录（例：查询课程号为1或2的课程）"></a>7.查询在某个集合里的记录（例：查询课程号为1或2的课程）</h2><blockquote><p>采用or连接条件或者使用in</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sc <span class="keyword">where</span> cno <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> cno <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sc <span class="keyword">where</span> cno <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="8-查询不在集合里的记录"><a href="#8-查询不在集合里的记录" class="headerlink" title="8.查询不在集合里的记录"></a>8.查询不在集合里的记录</h2><blockquote><p>使用not in</p><p>例：查询课程号不是1和2的课程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sc where sno not in (1,2);</span><br></pre></td></tr></table></figure><h2 id="9-查询空或者非空"><a href="#9-查询空或者非空" class="headerlink" title="9.查询空或者非空"></a>9.查询空或者非空</h2><blockquote><p>使用is null 和 is not null</p></blockquote><h1 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h1><h2 id="1-order-by（排序）"><a href="#1-order-by（排序）" class="headerlink" title="1.order  by（排序）"></a>1.order  by（排序）</h2><blockquote><p>order  by默认是升序</p><p>例：查询学生成绩按升序排列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> sc <span class="keyword">order</span> <span class="keyword">by</span>  grade</span><br></pre></td></tr></table></figure><blockquote><p>直接order  by就是升序</p><p>要降序在后面加一个desc即可</p><p>例：查询学生成绩按降序序排列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> sc <span class="keyword">order</span> <span class="keyword">by</span>  grade <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="2-COUNT"><a href="#2-COUNT" class="headerlink" title="2.COUNT"></a>2.COUNT</h2><blockquote><p>count(*)是统计总的记录数</p><p>count(列名)统计某一列非空的记录数</p><p>例：统计学生总个数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu</span><br></pre></td></tr></table></figure><blockquote><p>统计选修了课程的学生</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span><span class="operator">*</span><span class="keyword">distinct</span><span class="operator">*</span><span class="operator">*</span> sno) <span class="keyword">from</span> sc</span><br></pre></td></tr></table></figure><blockquote><p><code>distinct</code>用于去除重复</p></blockquote><h2 id="3-AVG"><a href="#3-AVG" class="headerlink" title="3.AVG"></a>3.AVG</h2><blockquote><p>计算指定列的平均值(必须是数的类型，varchar这种无法使用)</p><p>例：计算选修了20201号课程的学生平均成绩</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">AVG</span>(grade) <span class="keyword">from</span> sc <span class="keyword">where</span> cno <span class="operator">=</span> <span class="number">20201</span></span><br></pre></td></tr></table></figure><h2 id="4-max-min"><a href="#4-max-min" class="headerlink" title="4.max  min"></a>4.max  min</h2><blockquote><p>计算指定列的最大最小值</p><p>例：计算选修了20201号课程的学生最高,最低成绩</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(grade) , <span class="built_in">min</span>(grade)   <span class="keyword">from</span> sc <span class="keyword">where</span> cno <span class="operator">=</span> <span class="number">20201</span></span><br></pre></td></tr></table></figure><h2 id="5-group-by"><a href="#5-group-by" class="headerlink" title="5.group by"></a>5.group by</h2><blockquote><p>以指定的列来进行分组</p><p>例：查询各课程号及其选修人数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cno , <span class="built_in">count</span>(sno)  <span class="keyword">as</span> num <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> cno</span><br></pre></td></tr></table></figure><blockquote><p><code>PS:group by 如果要加条件，不能用where 要用HAVING</code></p></blockquote><h2 id="6-聚集函数不能用在where后"><a href="#6-聚集函数不能用在where后" class="headerlink" title="6.聚集函数不能用在where后"></a>6.聚集函数不能用在where后</h2><blockquote><p>在where之后不能使用聚集函数来做条件，如果要是用聚集函数当条件要用HAVING,配合group by一起使用</p><p>例：查询平均成绩大于90的学生学号和平均成绩</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno , <span class="built_in">AVG</span>(grade)  <span class="keyword">from</span>  sc  <span class="keyword">group</span>  <span class="keyword">by</span>  sno  <span class="keyword">HAVING</span>  <span class="built_in">AVG</span>(grade) <span class="operator">&gt;=</span> <span class="number">90</span>  </span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="1-连接查询"><a href="#1-连接查询" class="headerlink" title="1.连接查询"></a>1.连接查询</h2><h3 id="1-1等值查询"><a href="#1-1等值查询" class="headerlink" title="1.1等值查询"></a>1.1等值查询</h3><blockquote><p>例：查询每个学生的信息和其选修课的信息</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stu.<span class="operator">*</span> , sc.<span class="operator">*</span> <span class="keyword">from</span> stu , sc <span class="keyword">where</span> stu.sno <span class="operator">=</span> sc.sno</span><br></pre></td></tr></table></figure><blockquote><p>查询选修了20201课程的学生姓名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> stu , sc <span class="keyword">where</span> stu.sno <span class="operator">=</span> sc.sno <span class="keyword">and</span> sc.cno <span class="operator">=</span> <span class="string">&#x27;20201&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-2左外连接"><a href="#1-2左外连接" class="headerlink" title="1.2左外连接"></a>1.2左外连接</h3><blockquote><p>例：查询所有学生都信息和其选课信息，没有选课的学生也显示出来</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stu.<span class="operator">*</span> , sc.<span class="operator">*</span> <span class="keyword">from</span> stu `<span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span>` sc  `<span class="keyword">on</span>`  stu.sno <span class="operator">=</span> sc.sno</span><br></pre></td></tr></table></figure><blockquote><p>注意是用on不是用where，outer可以省略</p><p>查询每个专业的学生人数，但是有点专业没有人</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  major.mno , <span class="built_in">count</span>(sno) <span class="keyword">from</span> major <span class="keyword">left</span> <span class="keyword">join</span> stu  <span class="keyword">on</span> major.mno <span class="operator">=</span> stu.mno <span class="keyword">group</span> <span class="keyword">by</span> major.mno</span><br></pre></td></tr></table></figure><blockquote><p>注意group by的位置，使用分组的时候必须在group by之后，连接时要先连接在分组</p></blockquote><h2 id="2-嵌套查询"><a href="#2-嵌套查询" class="headerlink" title="2.嵌套查询"></a>2.嵌套查询</h2><h3 id="2-1不相关查询（子查询不依赖父查询）"><a href="#2-1不相关查询（子查询不依赖父查询）" class="headerlink" title="2.1不相关查询（子查询不依赖父查询）"></a>2.1不相关查询（子查询不依赖父查询）</h3><blockquote><p>查询选修了20201课程的学生姓名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> stu  <span class="keyword">where</span> sno <span class="keyword">in</span> (<span class="keyword">select</span> sno <span class="keyword">from</span> sc <span class="keyword">where</span> cno <span class="operator">=</span> <span class="string">&#x27;20201&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意用的是in，因为返回结果有多个，要是子查询结果只有一个可以用 &#x3D; ，但是一般都是用in</p></blockquote><h3 id="2-2相关嵌套查询"><a href="#2-2相关嵌套查询" class="headerlink" title="2.2相关嵌套查询"></a>2.2相关嵌套查询</h3><blockquote><p>查询选修了20201课程的学生姓名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> stu  <span class="keyword">where</span> <span class="string">&#x27;20201&#x27;</span>  <span class="keyword">in</span> (<span class="keyword">select</span> cno  <span class="keyword">from</span> sc <span class="keyword">where</span> sc.sno <span class="operator">=</span> stu.sno)</span><br></pre></td></tr></table></figure><blockquote><p>查询选修了c语言课程的学生学号</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> sc <span class="keyword">where</span> <span class="string">&#x27;C语言&#x27;</span> <span class="keyword">in</span> (<span class="keyword">select</span> cname <span class="keyword">from</span> cou <span class="keyword">where</span> sc.cno <span class="operator">=</span> cou.cno)</span><br></pre></td></tr></table></figure><blockquote><p>查询每个学生超过他平均成绩的课程号</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,cno <span class="keyword">from</span> sc x <span class="keyword">where</span> grade <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">AVG</span>(grade) <span class="keyword">from</span> sc y <span class="keyword">group</span> <span class="keyword">by</span> sno  <span class="keyword">HAVING</span>  x.sno <span class="operator">=</span> y.sno)</span><br></pre></td></tr></table></figure><blockquote><p>还可以使用派生表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno , cno <span class="keyword">from</span> sc,(<span class="keyword">select</span> sno,<span class="built_in">AVG</span>(grade)  <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> sno ) <span class="keyword">as</span> avg_sc(avg_sno,avg_grade)</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> sc.sno <span class="operator">=</span> avg_sc.avg_sno  <span class="keyword">and</span>  sc.grade <span class="operator">&gt;</span> avg_sc.avg_grade</span><br></pre></td></tr></table></figure><h2 id="3-带exists的查询"><a href="#3-带exists的查询" class="headerlink" title="3.带exists的查询"></a>3.带exists的查询</h2><blockquote><p>查询选修了20201课程的学生姓名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> stu  <span class="keyword">where</span>  <span class="keyword">exists</span>   (<span class="keyword">select</span>   <span class="operator">*</span>  <span class="keyword">from</span> sc <span class="keyword">where</span>  sc.sno <span class="operator">=</span> stu.sno)</span><br></pre></td></tr></table></figure><blockquote><p><code>PS:exists()只会返回true或者false，他会在stu中选一行，进行匹配，匹配成功为true，证明这一行为所要查询的</code></p></blockquote><h2 id="4-集合查询"><a href="#4-集合查询" class="headerlink" title="4.集合查询"></a>4.集合查询</h2><h3 id="4-1-并-x2F-或（union）"><a href="#4-1-并-x2F-或（union）" class="headerlink" title="4.1 并&#x2F;或（union）"></a>4.1 并&#x2F;或（union）</h3><blockquote><p>查询选修了20201 或 20203课程的学号</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> sc  <span class="keyword">where</span> cno <span class="operator">=</span> <span class="string">&#x27;20201&#x27;</span>  <span class="keyword">union</span>  <span class="keyword">select</span> sno <span class="keyword">from</span> sc  <span class="keyword">where</span> cno <span class="operator">=</span> <span class="string">&#x27;20203&#x27;</span> </span><br></pre></td></tr></table></figure><blockquote><p>两条记录进行合并并且会去重</p></blockquote><h3 id="4-2交（intersect）"><a href="#4-2交（intersect）" class="headerlink" title="4.2交（intersect）"></a>4.2交（intersect）</h3><blockquote><p>查询年龄是18且mno为1的学生的学号</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  sno <span class="keyword">from</span> stu  <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span>  <span class="operator">*</span><span class="operator">*</span><span class="keyword">intersect</span><span class="operator">*</span><span class="operator">*</span>  <span class="keyword">select</span>  sno <span class="keyword">from</span> stu  <span class="keyword">where</span> mno<span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-3差（except-）"><a href="#4-3差（except-）" class="headerlink" title="4.3差（except ）"></a>4.3差（except ）</h3><blockquote><p>查询年龄是18且mno为1的学生的学号</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  sno <span class="keyword">from</span> stu  <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span>  <span class="keyword">except</span>  <span class="keyword">select</span>  sno <span class="keyword">from</span> stu  <span class="keyword">where</span> mno <span class="operator">!=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>视图是从一个或几个基本表(或视图)导出的表。不同的是，它是一个虚表，数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍然存放在原本的基本表中。所以一旦基本表发生变化，从视图中查询的数据也就随之改变。</p><p>作用之一:视图更加方便用户的查询.</p></blockquote><h2 id="2-创建视图"><a href="#2-创建视图" class="headerlink" title="2.创建视图"></a>2.创建视图</h2><blockquote><p>creat view 视图名 as 查询语句</p><p>例：建立一个查询学生姓名，学号，年龄的视图</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu <span class="keyword">as</span> <span class="keyword">select</span> sname , age , sno  <span class="keyword">from</span> stu</span><br></pre></td></tr></table></figure><blockquote><p>注意：时如果有列是聚集函数计算出来的，比如sum，avg这些计算出来的，会没有列名，那么定义视图时必须给他们定义一个列名</p></blockquote><h2 id="3-利用视图进行查询"><a href="#3-利用视图进行查询" class="headerlink" title="3.利用视图进行查询"></a>3.利用视图进行查询</h2><blockquote><p>视图的查询和表的查询是一样的</p></blockquote><h2 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h2><blockquote><p>alter   view 视图名 as 查询语句</p></blockquote><h2 id="5-删除"><a href="#5-删除" class="headerlink" title="5.删除"></a>5.删除</h2><blockquote><p>drop view  视图名</p></blockquote><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><blockquote><p>存储过程是事先经过编译并保存在数据库中的一段SQL语句集合，使用时调用即可</p></blockquote><h2 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2.创建存储过程"></a>2.创建存储过程</h2><h3 id="2-1无参"><a href="#2-1无参" class="headerlink" title="2.1无参"></a>2.1无参</h3><blockquote><p>create proc  名字</p><p>as</p><p>begin</p><p>想要执行的查询语句</p><p>end</p></blockquote><h3 id="2-2有参"><a href="#2-2有参" class="headerlink" title="2.2有参"></a>2.2有参</h3><blockquote><p>create proc  名字  @ 参数1  参数1的类型 ,  @参数2  参数2的类型 , ……..</p><p>as</p><p>begin</p><p>想要执行的查询语句</p><p>end</p><p>例：查询某学生指定课程号的成绩和学分</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc  p1  <span class="variable">@sno</span>  <span class="type">varchar</span>(<span class="number">13</span>) ,  <span class="variable">@cno</span>  <span class="type">varchar</span>(<span class="number">13</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sc.<span class="operator">*</span> , cou.ccredit <span class="keyword">from</span> sc ,cou  <span class="keyword">where</span> sc.cno <span class="operator">=</span> <span class="variable">@cno</span>  <span class="keyword">and</span> sc.cno <span class="operator">=</span> cou.cno  <span class="keyword">and</span> sno <span class="operator">=</span> <span class="variable">@sno</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="3-执行存储过程"><a href="#3-执行存储过程" class="headerlink" title="3.执行存储过程"></a>3.执行存储过程</h2><blockquote><p>exec  名字</p><p>exec 名字  参数1，参数2</p></blockquote><h2 id="4-修改-1"><a href="#4-修改-1" class="headerlink" title="4.修改"></a>4.修改</h2><blockquote><p>alter proc 名字 +修改的内容</p><p>无参的可以修改为有参的</p><p>例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alert  proc  p1  @sno  varchar(13) ,  @cno  varchar(13)  </span><br><span class="line"></span><br><span class="line">as</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">select sc.* , cou.ccredit from sc ,cou  where sc.cno = @cno  and sc.cno = cou.cno  and sno = @sno</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="5-删除-1"><a href="#5-删除-1" class="headerlink" title="5.删除"></a>5.删除</h2><blockquote><p>drop  proc  名字</p></blockquote><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>监视某种情况，并触发某种操作，当对一个表格进行增删改就有可能自动激活执行它</p><p>一个表可以创建多个 After触发器，但只能创建一个 instead of触发器</p><p>after<br>  这类触发器是在记录已经被修改完，事务已提交后被触发执行。主要用记录变更后的处理或检查，一旦发现BUG，可以使用ROLLBACK TRANSACTION语句回滚本次操作。</p><p>instead of<br>  这类触发器不去执行其定义的操作（Insert、update、delete），交给触发器执行，触发器检查操作是否正确，若正确则执行操作。这类触发器用来取代原本的操作，在记录变更之前被触发。</p></blockquote><h2 id="2-创建触发器"><a href="#2-创建触发器" class="headerlink" title="2.创建触发器"></a>2.创建触发器</h2><blockquote><p>create  trigger  触发器名  on  表名</p><p>after  &#x2F;instead of（之前&#x2F;之后）</p><p>update&#x2F;delete&#x2F;insert （改&#x2F;删&#x2F;增）</p><p>as<br>begin<br>    代码段<br>end</p></blockquote><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h2><blockquote><p>stu学生表人数不能超过17</p><p><strong>写法1：</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1 <span class="keyword">on</span> stu after <span class="keyword">insert</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">if  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu) <span class="operator">&gt;</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span> tran</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>正常插入</p><p><img src="https://cdn.jsdelivr.net/gh/liushuhuang/PicGo@main/img/202209171041291.png" alt="image-20220423100325837"></p><p>超过17</p><p><img src="https://cdn.jsdelivr.net/gh/liushuhuang/PicGo@main/img/202209171042622.png" alt="image-20220423100400815"></p></blockquote><blockquote><p><strong>写法2</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1 <span class="keyword">on</span> stu instead <span class="keyword">of</span>  <span class="keyword">insert</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">if  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu) <span class="operator">&gt;</span> <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span> tran</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@sno</span> <span class="type">varchar</span>(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@sname</span> <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@age</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@sex</span> bit</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@mno</span> <span class="type">int</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@sno</span> <span class="operator">=</span> sno <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@sname</span> <span class="operator">=</span> sname <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@age</span> <span class="operator">=</span> age <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@sex</span> <span class="operator">=</span> sex <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@mno</span> <span class="operator">=</span> mno <span class="keyword">from</span> inserted</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="variable">@sno</span>,<span class="variable">@sname</span>,<span class="variable">@age</span>,<span class="variable">@sex</span>,<span class="variable">@mno</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>解释</strong>：(1) inserted是一个表，在插入之前数据会保存在这个表李（还有deleted表，是在删除前会存在里面）</p><p>​(2) 插入的参数也可以不写全，看自己的需求</p></blockquote><blockquote><p>例2：stu表不能少于16人</p><p>写法1：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1 <span class="keyword">on</span> stu instead <span class="keyword">of</span> <span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">if  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu) <span class="operator">&lt;</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span> tran</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;right&#x27;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@sno</span> <span class="type">varchar</span>(<span class="number">13</span>)</span><br><span class="line"><span class="keyword">select</span>  <span class="variable">@sno</span> <span class="operator">=</span> sno <span class="keyword">from</span> deleted</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu <span class="keyword">where</span> sno <span class="operator">=</span> <span class="variable">@sno</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>写法2</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1 <span class="keyword">on</span> stu after <span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">if  (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu) <span class="operator">&lt;</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span> tran</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;right&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>例3：当新增学生分数位55-59，将分数改为60</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t2 <span class="keyword">on</span> sc instead <span class="keyword">of</span> <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@sno</span> <span class="type">varchar</span>(<span class="number">13</span>)</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@cno</span> <span class="type">varchar</span>(<span class="number">13</span>)</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@grade</span> <span class="type">decimal</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@sno</span> <span class="operator">=</span> sno <span class="keyword">from</span> inserted</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@cno</span> <span class="operator">=</span> cno <span class="keyword">from</span> inserted</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@grade</span> <span class="operator">=</span> grade <span class="keyword">from</span> inserted</span><br><span class="line">if <span class="variable">@grade</span> <span class="operator">&gt;=</span> <span class="number">55</span> <span class="keyword">and</span> <span class="variable">@grade</span> <span class="operator">&lt;=</span><span class="number">59</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@grade</span> <span class="operator">=</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc(sno,cno,grade) <span class="keyword">values</span>(<span class="variable">@sno</span>,<span class="variable">@cno</span>,<span class="variable">@grade</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>类似avg，sum这种就是函数，他和存储过程很像，但是会有返回值</p><p>用户可以自定义自己的函数</p></blockquote><h2 id="2-定义一个函数"><a href="#2-定义一个函数" class="headerlink" title="2.定义一个函数"></a>2.定义一个函数</h2><blockquote><p>create function  函数名 （参数1 参数1的类型，参数2  参数2的类型，….）</p><p>returns  返回值类型</p><p>as</p><p>begin</p><p>​执行语句</p><p>​return  返回值</p><p>end</p></blockquote><h2 id="3-执行函数"><a href="#3-执行函数" class="headerlink" title="3.执行函数"></a>3.执行函数</h2><blockquote><p>select   dbo.函数名（参数1，参数2，…） </p></blockquote><h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4.例子"></a>4.例子</h2><blockquote><p>例1：计算某门课的平均分</p><p>创建</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> fun1 (<span class="variable">@cno</span> <span class="type">varchar</span>(<span class="number">13</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@avggrade</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@avggrade</span> <span class="operator">=</span> <span class="built_in">avg</span>(grade) <span class="keyword">from</span> sc <span class="keyword">where</span> <span class="variable">@cno</span> <span class="operator">=</span> cno</span><br><span class="line"><span class="keyword">return</span> <span class="variable">@avggrade</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>执行</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dbo.fun1(<span class="string">&#x27;20202&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>例2：输入专业号，返回该专业学生学号和姓名</p><p>创建</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> fun2 (<span class="variable">@mno</span> <span class="type">varchar</span>(<span class="number">13</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="variable">@Snosname</span> <span class="keyword">table</span>(</span><br><span class="line">sno <span class="type">varchar</span>(<span class="number">13</span>),</span><br><span class="line">sname <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="variable">@Snosname</span>(sno,sname) <span class="keyword">select</span> sno,sname <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="variable">@mno</span> <span class="operator">=</span> mno</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>执行</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> fun2(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>例3：输入专业号返回这个专业所有学生每个课程对于成绩的一个表</p><p>创建</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> fun3(<span class="variable">@mno</span> <span class="type">varchar</span>(<span class="number">13</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="variable">@Snograde</span> <span class="keyword">table</span>(</span><br><span class="line">sno <span class="type">varchar</span>(<span class="number">13</span>),</span><br><span class="line">cno <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">grade <span class="type">decimal</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="variable">@Snograde</span>(sno,cno,grade) <span class="keyword">select</span> sno,cno,grade <span class="keyword">from</span> sc <span class="keyword">where</span> sno <span class="keyword">in</span> (<span class="keyword">select</span> sno <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="variable">@mno</span> <span class="operator">=</span> mno)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>概念:索引是对数据库表中的一列或多列值进行排序的一种结构</p><p>目的是为了加快查询到速度，但是会占用一定的存储空间需要更新和维护</p></blockquote><h2 id="2-什么时候不创建"><a href="#2-什么时候不创建" class="headerlink" title="2.什么时候不创建"></a>2.什么时候不创建</h2><blockquote><p>1.频繁更新的字段或者经常增删改的字段，不适合创建索引（频繁变化导致索引也频繁变化，增大数据库工作量，降低效率。）</p><p>2.表的记录较少，不适合（不需要）建立索引</p><p>3.如果某列的数据重复数据过多，不适合创建索引（例：性别只有男，女之分，这种值不适合建立索引）</p><p>4.字段不在where语句出现时不要添加索引，如果where后含IS NULL 或IS NOT NULL或 like ‘%输入符%’等条件，不建议使用索引。只有在where语句出现，mysql才会去使用索引。</p></blockquote><h2 id="3-索引失效"><a href="#3-索引失效" class="headerlink" title="3.索引失效"></a>3.索引失效</h2><blockquote><p>1.有or必须条件全有索引，有一个没有索引，其他的有索引也会失效;<br>2.复合索引未用左列字段（复合索引必须要使用最左边的第一列，只有加了这一列，复合索引后面的才会生效）;<br>3.like以%开头，索引失效;<br>4.需要类型转换，索引失效;<br>5.where中索引列有运算，索引失效;<br>6.where中索引列使用了函数，索引失效;<br>7.如果mysql觉得全表扫描更快时（数据少），会自动进行全表扫描忽略索引，索引失效;</p></blockquote><h2 id="4-聚集索引和非聚集索引"><a href="#4-聚集索引和非聚集索引" class="headerlink" title="4.聚集索引和非聚集索引"></a>4.聚集索引和非聚集索引</h2><h2 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>聚集索引：数据行的物理顺序和列值（一般是主键那列）的逻辑顺序相同，一个表只能有一个聚集索引</p><p>非聚集索引：数据行的物理顺序和列值的逻辑顺序可能不相同，一个表只能有一个或多个非聚集索引</p></blockquote><h2 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h2><blockquote><p>create  index  索引名  on  表名  （列名1  限制1 ，列名2  限制2）</p></blockquote><blockquote><p>例：按学号升序，课程号降序创建唯一索引</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index scno <span class="keyword">on</span> sc (sno <span class="keyword">asc</span>,cno <span class="keyword">desc</span>)</span><br></pre></td></tr></table></figure><h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h2><blockquote><p>drop index 索引名 on  表名</p><p>例：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index scno <span class="keyword">on</span> sc</span><br></pre></td></tr></table></figure><h2 id="4-既然HASH比B-树更快，为什么MYSQL用B-树来存储索引呢？"><a href="#4-既然HASH比B-树更快，为什么MYSQL用B-树来存储索引呢？" class="headerlink" title="4.既然HASH比B+树更快，为什么MYSQL用B+树来存储索引呢？"></a>4.既然HASH比B+树更快，为什么MYSQL用B+树来存储索引呢？</h2><blockquote><p>MySQL中存储索引用到的数据结构是B+树，B+树的查询时间跟树的高度有关，是log(n)，如果用hash存储，那么查询时间是O(1)。</p><p>采用Hash来存储确实要更快，但是采用B+树来存储索引的原因主要有以下两点：</p><p>一、从内存角度上说，数据库中的索引一般是在磁盘上，数据量大的情况可能无法一次性装入内存， B+树的设计可以允许数据分批加载。</p><p>二、从业务场景上说，如果只选择一个数据那确实是hash更快，但是数据库中经常会选中多条，这时候 由于B+树索引有序，并且又有链表相连，它的查询效率比hash就快很多了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/2022/09/07/linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/09/07/linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h1><p>通过进程名找到进程：</p><blockquote><p>ps aux | grep 进程名</p></blockquote><p>杀死进程：</p><blockquote><p>Kill -9 进程PID</p></blockquote><h1 id="查看文件："><a href="#查看文件：" class="headerlink" title="查看文件："></a>查看文件：</h1><blockquote><p>More （只能往后看）</p></blockquote><blockquote><p>Less （可以往前也可以往后）</p></blockquote><blockquote><p>（more空格翻页，空格下一行；less用方向键上下行；空格键 滚动一行回车键 滚动一页） </p></blockquote><blockquote><p>tail -f 文件名 （实时动态实时显示当前的日志）</p></blockquote><blockquote><p>tail -f -n 100 文件名 查看最后（最近）100行</p></blockquote><blockquote><p>hand -f -n 100 查看前100行</p></blockquote><blockquote><p>（tail 和hand不能翻页，more和less可以） </p></blockquote><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><blockquote><p>查看端口是否被占用</p></blockquote><blockquote><p>netstat  -anp | grep  端口号</p></blockquote><blockquote><p>结果中有Listen表示被占用</p></blockquote><blockquote><p>（Ps：<strong>LISTENING并不表示被占用</strong>）</p></blockquote><blockquote><p>查看当前所有已经使用的端口情况</p></blockquote><blockquote><p>netstat  -nultp（此处不用加端口号）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2022/09/07/%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/09/07/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="1-反射有什么用"><a href="#1-反射有什么用" class="headerlink" title="1.反射有什么用"></a>1.反射有什么用</h2><p>通过反射可以操作字节码</p><h2 id="2-反射相关的类"><a href="#2-反射相关的类" class="headerlink" title="2.反射相关的类"></a>2.反射相关的类</h2><blockquote><p>Java.lang.Class 代表字节码文件</p><p>java.lang.reflect. Field代表字节码中的属性字节码</p><p>java.lang.reflect. Method 代表字节码中的方法字节码</p><p>java.lang.reflect. Constructor<T> 代表字节码中的构造方法字节码</p><p>java.lang.reflect. Proxy  动态代理使用</p></blockquote><h2 id="3-获取字节码（获取Class类）"><a href="#3-获取字节码（获取Class类）" class="headerlink" title="3.获取字节码（获取Class类）"></a>3.获取字节码（获取Class类）</h2><blockquote><p>1.Class.forname(完整类名（带包名）)  将class文件加载到方法区</p><p>2.对象的getClass方法</p><p>3.java中任何一种类型，包括基本数据类型，都有一个class属性</p><p><img src="https://cdn.jsdelivr.net/gh/liushuhuang/PicGo@main/img/202209171038056.png" alt="image-20220511125717461"></p></blockquote><p>通过不同方式获得的class对象是同一个</p><p>字节码文件装载到jvm，只要有一份</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
